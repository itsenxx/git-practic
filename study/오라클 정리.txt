환경설정

1. 스키마
스키마 객체(Schema Object)
테이블, 뷰, 인덱스와 같은 구조를 포함하는 논리적인 데이터 저장 구조를 가진 객체.

2. ERD(Entity Relationship Diagram)
관계형 데이터 베이스에서 테이블 간의 관계를 도식화 한 것.

SQL (Structured Query Language) 구조화된 질의 언어
 - DDL (Data Definition Language) 데이터 정의 언어
  CREATE 생성
  DROP 객체 삭제
  ALTER 수정
  TRUNCATE 테이블 데이터 삭제
 - DML (Data Manipulation Language) 데이터 조작 언어
  SELECT 조회
  INSERT 삽입(생성)
  UPDATE 수정
  DELETE 삭제
  COMMIT 적용(작업확정)
  ROLLBACK 복원(이전상태) 

=================================
데이터 베이스 객체
 - 테이블, 뷰, 인덱스, 시노님, 시퀀스, 파티션 테이블 ... 제약조건

**** 테이블 생성
CREATE TABLE 테이블명(
	컬럼명	데이터타입(크기)	[제약사항],
	컬럼명	데이터타입	[제약사항]
);

**** 테이블 삭제
DROP TALBE 테이블명;

-- DML 관련
데이터 삽입
INSERT INTO 테이블명(컬럼1, 컬럼2, ...) 
VALUES (값1, 값2, ...);

데이터 조회
SELECT	컬럼명 
FROM	테이블명;

데이터 수정
UPDATA

데이터 삭제
DELETE

**** 데이터 타입
문자 - VARCHAR2, CHAR
숫자 - NUMBER
날짜 - DATE
LOB - BLOB

* 데이터 크기 지정
 - 입력하고자하는 데이터의 크기를 고려
 - 한글 1글자 = 3BYTE

LENGTH() - 길이 반환
LENGTHB() - byte 단위로 길이 반환

NUMBER[(p, s)]
p : 유효 숫자 개수 (표현되는 숫자 개수)
s : 표현되는 소수점 자리수 (s+1 소수점 자리수에서 반올림)

* 오라클 시스템 테이블
 - USER_TAB_COLUMNS : 테이블의 열(COLUMN) 정보
  (COLUMN_NAME / DATA_TYPE / NULLABLE 등)
 - USER_CONSTRAINTS : 제약조건 정보
 - USER_INDEXES : 인덱스 정보

* Dual Table : 꼭두각시(dummy) 테이블
 - 표는 있지만 안에 내용물은 없는 형태
 - Dual Table 특징
  오라클 자체에서 제공하는 테이블
  간단하게 함수를 이용해서 계산 결과 값을 확인 할 때 사용
  [시스템 사용자(sys)가 소유하는 오라클의 표준 테이블]
  [시스템 사용자(sys)가 소유하지만 어느 사용자에서 접근 가능함.]
  [카디널리티(컬럼 수)와 차수()가 모두 1인 dummy 테이블]

*** SYSDATE : 시스템 날짜를 가져와서 사용 (년월일 시분초)


*** 제약조건
- 오라클 객체의 하나로 컬럼에 대한 속성 지정

NULL / NOT NULL : 해당 컬럼에 데이터 값 포함 여부
UNIQUE :	한 테이블 내 중복된 값 없음
PRIMARY KEY : 기본키, (NOT NULL + UNIQUE), 테이블 당 1개만 가짐
FOREIGN KEY : 외래키, 다른(참조) 테이블의 기본키를 가져와 사용하는 경우
CHECK : 특정 데이터만 입력

CREATE TABLE 테이블명(
	컬럼	데이터타입	NOT NULL,
	컬럼	데이터타입	UNIQUE,
	컬럼	데이터타입	PRIMARY KEY
	컬럼	데이터타입	DEFAULT 0
	컬럼4	데이터타입,
	CONSTRAINTS	제약조건명	제약조건 (컬럼명)
	CONSTRAINTS	U_테이블명_컬럼명	UNIQUE (컬럼4)
);

컬럼 속성 
DEFAULT => 기본값

* 뷰 : 하나이상의 테이블이나 다른 뷰의 데이터를 볼수있는 객체

- 뷰 생성
CREATE OR REPLACE VIEW 뷰명 AS
SELECT 문장;

- 뷰 삭제
DROP VIEW 뷰명;


***시퀀스
자동으로 순번을 반환

CREATE SEQUENCE	시퀀스명
INCREMENT BY	증감 숫자
START WITH	시작숫자
MINVALUE	최소값
MAXVALUE	최대값
NOCYCLE	 | CYCLE	
NOCACHE | CACHE
;

시퀀스명.NEXTVAL	:	사용하면 다음 순번값을 가져온다.
시퀀스명.CURRVAL	:	현재 (순번)값을 확인

DROP SEQUENCE 시퀀스명;

==========================================

ALTER TABLE 테이블명
**** 테이블 변경(수정)
1. 컬럼명 변경
2. 컬럼 타입 변경
3. 컬럼 추가
4. 컬럼 삭제
5. 제약조건 추가
6. 제약조건 삭제

1. 컬럼명 변경
ALTER TABLE 테이블명 RENAME COLUMN 변경전컬럼명 TO 변경후컬럼명;
2. 컬럼 타입 변경
ALTER TABLE 테이블명 MODIFY 컬럼명 데이터타입;
3. 컬럼 추가
ALTER TABLE 테이블명 ADD 컬럼명 데이터타입;
4. 컬럼 삭제
ALTER TABLE 테이블명 DROP COLUMN 컬럼명;
5. 제약조건 추가
ALTER TABLE 테이블명 ADD CONSTRAINTS 제약조건명 제약조건(컬럼명);
6. 제약조건 삭제
ALTER TABLE 테이블명 DROP CONSTRAINTS 제약조건명;

**** 테이블 복사
CREATE TABLE 테이블명 AS
SELECT	컬럼1, 컬럼2, ....
FROM	테이블명;

- 뷰
검색하는 내용을 효과적으로 보기 위한 객체
(하나 이상의 테이블을 보는 객체)
생성
CREATE OR REPLACE VIEW 뷰명 AS
SELECT 문장;
삭제
DROP VIEW 뷰명;

- 인덱스
검색 속도를 높이기 위한 객체
생성
CREATE INDEX 인덱스명
ON 테이블명(컬럼1, 컬럼2);
삭제
DROP INDEX 인덱스명;

- 시노님
객체의 동의어, 별칭
이순신 작가 별칭 => 홍길동 
세종대왕 => 홍길동 

생성
CREATE [PUBLIC] SYNONYM 시노님명
FOR 객체;
삭제
DROP [PUBLIC] SYNONYM 시노님명;


==========================================

-- SQL(DML) 관련
***** SELECT : 데이터 조회
SELECT	컬럼명 
FROM	테이블명
WHERE	조건
ORDER BY 컬럼;

** 별칭(ALIAS)
원컬럼명 [AS] 컬럼별칭
명명 규칙에 따름
숫자를 처음에 쓰거나 특수문자 사용시 큰따옴표("") 사용


**** INSERT : 데이터 삽입 ( 개수, 순서 )
INSERT INTO 테이블명(컬럼1, 컬럼2, ...) VALUES (값1, 값2, ...);
INSERT INTO 테이블명 VALUES (값1, 값2, ...);
INSERT INTO 테이블명(컬럼1, 컬럼2, ...) SELECT문;

**** UPDATE : 데이터 수정
UPDATE	테이블명
SET	컬럼1 = 변경값1,
	컬럼2 = 변경값2
WHERE	조건;

* MERGE : 데이터 병합 (수정 또는 삽입)

MERGE INTO	테이블
USING	다른테이블에서 삽입 또는 수정할 데이터
ON	삽입 또는 수정 여부를 판단할 조건

WHEN MATCHED THEN
	UPDATE SET	컬럼1 = 값1, 컬럼2 = 값2
[WHERE		추가적인 수정 조건]
[DELETE WHERE	데이터 삭제 조건]

WHEN NOT MATCHED THEN
	INSERT (컬럼1, 컬럼2) VALUES (값1, 값2);

**** DELETE : 데이터 삭제
DELETE	테이블명;

** 트랜잭션(거래, 처리) 명령어
COMMIT;
변경 데이터를 DB에 최종 반영
ROLLBACK;
변경 데이터를 변경 전 상태로 되돌림

<문제 풀이 방법>
1. 문제 해석
  => 정보 분리, 사용할 테이블/컬럼/ 조건 확인
  => 정보 찾기(동사): 사용할 쿼리문/함수 확인
2. 쿼리문(테이블,CRUD) 및 쿼리문 틀 작성
3. 문제 해석 내용을 데이터베이스 문법에 맞게 적절하게 수정
4. 앞서 작성한 쿼리문 구문에 맞게 대입
5. 결과 테스트
6. 오류 발생시 내용 확인(오류 발생 행렬 관련) 수정
7. 결과 재 테스트

** 의사컬럼
ROWNUM	: 행들에 대한 순서
ROWID		: 테이블에 저장된 행의 주소값
시퀀스명.NEXTVAL	: 다음 값
시퀀스명.CURRVAL	: 현재 값

** 연산자
수식연산자	+ - * /
문자연산자	||
비교연산자	> < >= <= 
		<> != ^= : 같지 않다
논리연산자	AND OR NOT
집합연산자	UNION / UNION ALL / 
		INTERSECT / MINUS

** CASE 표현식
CASE	WHEN 조건1 THEN 값1
	WHEN 조건2 THEN 값2
	ELSE 값3
END;

** 조건식
비교 조건식	
ANY / SOME
해당 조건 중 어떤 하나라도 만족
ALL
해당 조건을 모두 만족

*** 조건식
비교 : ANY(값1,값2,...), SOME(값1,값2,...), ALL(값1,값2,...)
논리 : AND   OR   NOT
NULL : IS NULL   IS NOT NULL 
BETWEEN AND : 기준컬럼 BETWEEN 시작값 AND 끝값
IN : IN(값1, 값2, ...)
EXISTS : EXISTS( 서브쿼리 with 조인조건 )
	조인조건 : 테이블A.컬럼 = 테이블B.컬럼
LIKE : LIKE '문자열 패턴' 검색 

예) 사원테이블에서 사원이름이 'A'로 시작하는 사원을 조회
LIKE '%찾을문자열패턴%'
여러문자 : %
한문자 : 언더바( _ )


** SQL 함수
*** 숫자 함수 : 수식 연산 수행
ABS(n)		절대값
CEIL(n)		올림
FLOOR(n)		버림
ROUND(n, i)	반올림
TRUNC(n, i)	버림
MOD(n2, n1)	나머지

**** 문자 함수 : 문자 연산 수행
INITCAP(char)	첫자대문자
LOWER(char)	소문자
UPPER(char)	대문자
CONCAT(char1, char2)	두 문자를 붙임
SUBSTR(char, pos, len)	부분 문자열 반환
SUBSTRB(char, pos, len)	BYTE 단위로 부분 문자열 반환
LTRIM(char, set)		왼쪽 문자열 세트 제거
RTRIM(char, set)		오른쪽 문자열 세트 제거
표현식1에 총 문자열의 길이가 n이 될때까지 반복적으로 표현식2를 붙임
LPAD(expr1, n, expr2)	
RPAD(expr1, n, expr2)
REPLACE(char, search_str, replace_str)		문자열 대체
TRANSLATE(expr, from_str, to_str)		각각 문자 대체
INSTR(str, substr, pos, occur)	문자열 내 부분문자열과 일치하는 위치를 반환
LENGTH(chr)
LENGTHB(chr)

날짜 함수
SYSDATE		현재 날짜/시간 반환
LAST_DAY(date)	해당 월 마지막 일자 반환

변환 함수
TO_CHAR(표현식, 포멧)	문자형 변환
TO_NUMBER(표현식, 포멧)	숫자형 변환
TO_DATE(표현식, 포멧)	날짜형 변환

NULL 관련 함수
NVL(표현식1, 표현식2)
NVL2(표현식1, 표현식2, 표현식3)
COALESCE(표현식1, 표현식2, ...) : 입력값 중 NULL이 아닌 첫번째 값 반환
NULLIF(표현식1, 표현식2) => 입력값이 같으면 NULL 아니면 표현식1

기타 함수
GREATEST	최대값 반환
LEAST		최소값 반환
DECODE(표현식, 비교값1, 결과값1, 비교값2, 결과값, ... , 디폴트값)

DUAL 
 - 오라클 자체에서 제공되는 더미 테이블
 - 간단한 계산 결과 확인 용도
 - 한행, 한컬럼을 담고 있음

** 오라클 날짜, 시간 차이 계산 방법
종료일자 - 시작일자
반환 값 : 차이값을 "일" 기준 수치 값으로 반환

*** 집계함수
COUNT()		개수
SUM()		합
AVG()		평균
MIN()		최소값
MAX()		최대값

**GROUP BY 절
*HAVING 절

SELECT  컬럼
FROM    테이블
WHERE   조건
GROUP BY 컬럼
HAVING 컬럼
ORDER BY 컬럼;

** SQL 구문 순서
SELECT 컬럼명		5
FROM 테이블명		1
WHERE 조건		2
GROUP BY 컬럼명		3
HAVING 그룹 조건		4
ORDER BY 컬럼명		6


*****SQL(DML)	=> CRUD		(매우 중요!!!)
 : CRUD 소프트웨어가 가지는 기본적인 데이터 처리 기능인 
 Create(생성), Read(읽기), Update(갱신), Delete(삭제) 를 일컫는 말
========================
INSERT		=> CREATE
SELECT		=> READ
UPDATE		=> UPDATE
DELETE		=> DELETE


**** 조인 (매우 중요!!!)
 : 테이블간의 관계를 맺는 방법
 ## 내부조인
 동등 조인 - 조건절 등호를 사용해서 2개의 테이블을 연결
 세미 조인 - 서브쿼리에 존재하는 데이터만 메인 쿼리에서 추출
  - 중복 데이터가 없다.
  - EXISTS 연산자
  - IN 연산자
  !차이점 : IN 연산자는 서브쿼리 내에 조인조건이 없다.

 안티 조인 - 서브쿼리에 존재하지 않는 데이터만 메인 쿼리에서 추출
 셀프 조인 - 동일 테이블을 사용한 조인

 ## 외부조인
 - 기준컬럼을 비교하여 데이터가 없는 테이블.컬럼에 해당하는 동등조건에 (+) 표시
 - 조인 조건이 여러개일 때 모든 조건에 (+) 표시
 - (+) 연산자가 붙은 조건과 OR를 같이 사용 불가
 - 한번에 한 테이블에만 외부 조인이 가능

 ## 카타시안 조인
 - 조인 조건이 없음

 ## ANSI 조인	미국표준협회 (American National Standards Institute)
 - ANSI SQL 문법을 사용한 조인
 - 조인조건이 WHERE 절이 아니라 FROM 절에 포함

==========================================
 내부 조인

<ANSI 문법>
SELECT  컬럼
FROM    테이블1
	INNER JOIN	테이블2
	ON	(테이블1.컬럼 = 테이블2.컬럼)
WHERE   .....;
==========================================
 외부 조인

<ANSI 문법>
SELECT  컬럼
FROM    테이블1
	LEFT OUTER JOIN	테이블2
	ON	(테이블1.컬럼 = 테이블2.컬럼)
WHERE   .....;

==========================================
 CROSS 조인

<ANSI 문법>
SELECT  컬럼
FROM    테이블1
	CROSS JOIN	테이블2;

==========================================
 FULL OUTER 조인

SELECT  컬럼
FROM    테이블1
	FULL OUTER JOIN	테이블2
	ON	(테이블1.컬럼 = 테이블2.컬럼)
WHERE   .....;


=========================================
**** 서브쿼리


